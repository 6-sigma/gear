//! gear api
#![allow(dead_code)]

use crate::{
    api::{
        config::GearConfig,
        generated::api::{gas, gear, RuntimeApi},
    },
    Result,
};
use std::sync::Arc;
use subxt::{
    rpc::{rpc_params, ClientT, NumberOrHex},
    sp_core::{Bytes, H256},
    ClientBuilder, RpcClient, SubstrateExtrinsicParams,
};

mod config;
/// Auto generated by subxt-cli-0.21.0
///
/// gear-node 0.1.0-f48450dd-x86_64-linux-gnu
///
/// subxt codegen | rustfmt --edition=2021
pub mod generated;

const DEFAULT_GEAR_ENDPOINT: &str = "wss://rpc-node.gear-tech.io:443";

/// gear api
pub struct Api {
    api: RuntimeApi<GearConfig, SubstrateExtrinsicParams<GearConfig>>,
}

impl Api {
    /// New gear api
    pub async fn new(url: Option<&str>) -> Result<Self> {
        let api = ClientBuilder::new()
            .set_url(url.unwrap_or(DEFAULT_GEAR_ENDPOINT.into()))
            .build()
            .await?
            .to_runtime_api::<RuntimeApi<GearConfig, SubstrateExtrinsicParams<GearConfig>>>();

        Ok(Self { api })
    }

    /// get rpc client
    pub fn rpc(&self) -> Arc<RpcClient> {
        self.api.client.rpc().client.clone()
    }

    /// rpc call
    ///
    /// gear_getInitGasSpent
    pub async fn get_init_gas_spent(
        &self,
        source: H256,
        code: Bytes,
        payload: Bytes,
        value: u128,
        at: Option<H256>,
    ) -> Result<NumberOrHex> {
        self.rpc()
            .request(
                "gear_getInitGasSpent",
                rpc_params![source, code, payload, value, at],
            )
            .await
            .map_err(Into::into)
    }

    /// rpc call
    ///
    /// gear_getHandleGasSpent
    pub async fn get_handle_gas_spent(
        &self,
        source: H256,
        dest: H256,
        payload: Bytes,
        value: u128,
        at: Option<H256>,
    ) -> Result<NumberOrHex> {
        self.rpc()
            .request(
                "gear_getHandleGasSpent",
                rpc_params![source, dest, payload, value, at],
            )
            .await
            .map_err(Into::into)
    }

    /// pallet gas constants
    ///
    /// get gas limit
    pub async fn gas_limit(&self) -> Result<u64> {
        gas::constants::ConstantsApi::new(&self.api.client)
            .block_gas_limit()
            .map_err(Into::into)
    }

    /// pallet gear extrinsic
    ///
    /// gear submit_program
    pub async fn submit_program(&self, params: gear::calls::SubmitProgram) -> Result<()> {
        self.api.tx().gear().submit_program(
            params.code,
            params.salt,
            params.init_payload,
            params.gas_limit,
            params.value,
        )?;
        Ok(())
    }
}
